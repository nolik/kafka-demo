/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mysql.demo.purchase;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Value extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5340889077557363249L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Value\",\"namespace\":\"mysql.demo.purchase\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"customer_id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"product\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"price\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"CREATE_TS\",\"type\":[\"null\",{\"type\":\"string\",\"connect.name\":\"io.debezium.time.ZonedTimestamp\",\"connect.version\":1}],\"default\":null},{\"name\":\"UPDATE_TS\",\"type\":[\"null\",{\"type\":\"string\",\"connect.name\":\"io.debezium.time.ZonedTimestamp\",\"connect.version\":1}],\"default\":null}],\"connect.name\":\"mysql.demo.purchase.Value\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Value> ENCODER =
      new BinaryMessageEncoder<Value>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Value> DECODER =
      new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Value> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Value> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Value to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Value from a ByteBuffer. */
  public static Value fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int id;
  @Deprecated public java.lang.Integer customer_id;
  @Deprecated public java.lang.CharSequence product;
  @Deprecated public java.lang.Double price;
  @Deprecated public java.lang.CharSequence CREATE_TS;
  @Deprecated public java.lang.CharSequence UPDATE_TS;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Value() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param customer_id The new value for customer_id
   * @param product The new value for product
   * @param price The new value for price
   * @param CREATE_TS The new value for CREATE_TS
   * @param UPDATE_TS The new value for UPDATE_TS
   */
  public Value(java.lang.Integer id, java.lang.Integer customer_id, java.lang.CharSequence product, java.lang.Double price, java.lang.CharSequence CREATE_TS, java.lang.CharSequence UPDATE_TS) {
    this.id = id;
    this.customer_id = customer_id;
    this.product = product;
    this.price = price;
    this.CREATE_TS = CREATE_TS;
    this.UPDATE_TS = UPDATE_TS;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return customer_id;
    case 2: return product;
    case 3: return price;
    case 4: return CREATE_TS;
    case 5: return UPDATE_TS;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: customer_id = (java.lang.Integer)value$; break;
    case 2: product = (java.lang.CharSequence)value$; break;
    case 3: price = (java.lang.Double)value$; break;
    case 4: CREATE_TS = (java.lang.CharSequence)value$; break;
    case 5: UPDATE_TS = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'customer_id' field.
   * @return The value of the 'customer_id' field.
   */
  public java.lang.Integer getCustomerId() {
    return customer_id;
  }

  /**
   * Sets the value of the 'customer_id' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.Integer value) {
    this.customer_id = value;
  }

  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public java.lang.CharSequence getProduct() {
    return product;
  }

  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(java.lang.CharSequence value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'CREATE_TS' field.
   * @return The value of the 'CREATE_TS' field.
   */
  public java.lang.CharSequence getCREATETS() {
    return CREATE_TS;
  }

  /**
   * Sets the value of the 'CREATE_TS' field.
   * @param value the value to set.
   */
  public void setCREATETS(java.lang.CharSequence value) {
    this.CREATE_TS = value;
  }

  /**
   * Gets the value of the 'UPDATE_TS' field.
   * @return The value of the 'UPDATE_TS' field.
   */
  public java.lang.CharSequence getUPDATETS() {
    return UPDATE_TS;
  }

  /**
   * Sets the value of the 'UPDATE_TS' field.
   * @param value the value to set.
   */
  public void setUPDATETS(java.lang.CharSequence value) {
    this.UPDATE_TS = value;
  }

  /**
   * Creates a new Value RecordBuilder.
   * @return A new Value RecordBuilder
   */
  public static mysql.demo.purchase.Value.Builder newBuilder() {
    return new mysql.demo.purchase.Value.Builder();
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Value RecordBuilder
   */
  public static mysql.demo.purchase.Value.Builder newBuilder(mysql.demo.purchase.Value.Builder other) {
    return new mysql.demo.purchase.Value.Builder(other);
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Value instance.
   * @param other The existing instance to copy.
   * @return A new Value RecordBuilder
   */
  public static mysql.demo.purchase.Value.Builder newBuilder(mysql.demo.purchase.Value other) {
    return new mysql.demo.purchase.Value.Builder(other);
  }

  /**
   * RecordBuilder for Value instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Value>
    implements org.apache.avro.data.RecordBuilder<Value> {

    private int id;
    private java.lang.Integer customer_id;
    private java.lang.CharSequence product;
    private java.lang.Double price;
    private java.lang.CharSequence CREATE_TS;
    private java.lang.CharSequence UPDATE_TS;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mysql.demo.purchase.Value.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.product)) {
        this.product = data().deepCopy(fields()[2].schema(), other.product);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CREATE_TS)) {
        this.CREATE_TS = data().deepCopy(fields()[4].schema(), other.CREATE_TS);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.UPDATE_TS)) {
        this.UPDATE_TS = data().deepCopy(fields()[5].schema(), other.UPDATE_TS);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Value instance
     * @param other The existing instance to copy.
     */
    private Builder(mysql.demo.purchase.Value other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.product)) {
        this.product = data().deepCopy(fields()[2].schema(), other.product);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CREATE_TS)) {
        this.CREATE_TS = data().deepCopy(fields()[4].schema(), other.CREATE_TS);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.UPDATE_TS)) {
        this.UPDATE_TS = data().deepCopy(fields()[5].schema(), other.UPDATE_TS);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_id' field.
      * @return The value.
      */
    public java.lang.Integer getCustomerId() {
      return customer_id;
    }

    /**
      * Sets the value of the 'customer_id' field.
      * @param value The value of 'customer_id'.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder setCustomerId(java.lang.Integer value) {
      validate(fields()[1], value);
      this.customer_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_id' field has been set.
      * @return True if the 'customer_id' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customer_id' field.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder clearCustomerId() {
      customer_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public java.lang.CharSequence getProduct() {
      return product;
    }

    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder setProduct(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.product = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder clearProduct() {
      product = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Double getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder setPrice(java.lang.Double value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder clearPrice() {
      price = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'CREATE_TS' field.
      * @return The value.
      */
    public java.lang.CharSequence getCREATETS() {
      return CREATE_TS;
    }

    /**
      * Sets the value of the 'CREATE_TS' field.
      * @param value The value of 'CREATE_TS'.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder setCREATETS(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.CREATE_TS = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'CREATE_TS' field has been set.
      * @return True if the 'CREATE_TS' field has been set, false otherwise.
      */
    public boolean hasCREATETS() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'CREATE_TS' field.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder clearCREATETS() {
      CREATE_TS = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'UPDATE_TS' field.
      * @return The value.
      */
    public java.lang.CharSequence getUPDATETS() {
      return UPDATE_TS;
    }

    /**
      * Sets the value of the 'UPDATE_TS' field.
      * @param value The value of 'UPDATE_TS'.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder setUPDATETS(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.UPDATE_TS = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'UPDATE_TS' field has been set.
      * @return True if the 'UPDATE_TS' field has been set, false otherwise.
      */
    public boolean hasUPDATETS() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'UPDATE_TS' field.
      * @return This builder.
      */
    public mysql.demo.purchase.Value.Builder clearUPDATETS() {
      UPDATE_TS = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Value build() {
      try {
        Value record = new Value();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.customer_id = fieldSetFlags()[1] ? this.customer_id : (java.lang.Integer) defaultValue(fields()[1]);
        record.product = fieldSetFlags()[2] ? this.product : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Double) defaultValue(fields()[3]);
        record.CREATE_TS = fieldSetFlags()[4] ? this.CREATE_TS : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.UPDATE_TS = fieldSetFlags()[5] ? this.UPDATE_TS : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Value>
    WRITER$ = (org.apache.avro.io.DatumWriter<Value>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Value>
    READER$ = (org.apache.avro.io.DatumReader<Value>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
